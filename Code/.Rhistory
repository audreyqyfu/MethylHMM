pFNCHypergeo(y, m1=A, m2=seq(6000, 8000, 1000), n=B, odds=w[j], precision=1E-7, lower.tail=FALSE)
pFNCHypergeo(y, m1=A, m2=6000, n=B, odds=w[j], precision=1E-7, lower.tail=FALSE)
A
pFNCHypergeo(y, m1=A, m2=seq(6000, 8000, 1000)-A, n=B, odds=w[j], precision=1E-7, lower.tail=FALSE)
pFNCHypergeo(y, m1=A, m2=6000-A, n=B, odds=w[j], precision=1E-7, lower.tail=FALSE)
pFNCHypergeo(y, m1=A, m2=5500-A, n=B, odds=w[j], precision=1E-7, lower.tail=FALSE)
pFNCHypergeo(y, m1=A, m2=6500-A, n=B, odds=w[j], precision=1E-7, lower.tail=FALSE)
pFNCHypergeo(y, m1=A, m2=5500-A, n=B, odds=w[2], precision=1E-7, lower.tail=FALSE)
pFNCHypergeo(y, m1=A, m2=5500-A, n=B, odds=w[3], precision=1E-7, lower.tail=FALSE)
for (i in 1:length(N))#
	for (j = 1:length(w))#
		pvaluenh[i,j] = pFNCHypergeo(y, m1=A, m2=N[i]-A, n=B, odds=w[j], precision=1E-7, lower.tail=FALSE)
pvaluenh = matrix (0, nrow=length (N), ncol=length(w))#
for (i in 1:length(N))#
	for (j in 1:length(w))#
		pvaluenh[i,j] = pFNCHypergeo(y, m1=A, m2=N[i]-A, n=B, odds=w[j], precision=1E-7, lower.tail=FALSE)
par (mfrow=c(1,1))#
plot (N, pvalue, pch=18)
points (N, pvaluenh[,1], pch=16, col="red")
par (mfrow=c(1,1))#
matplot (N, pvaluenh, pch=18)
par (mfrow=c(1,1))#
matplot (N, pvaluenh[,1:3], pch=18)
par (mfrow=c(1,1))#
matplot (N, pvaluenh[,1:2], pch=18)
par (mfrow=c(1,1))#
matplot (N, pvaluenh[,1:3], pch=18)
par (mfrow=c(1,1))#
matplot (N, pvaluenh[,1:4], pch=18)
par (mfrow=c(1,1))#
matplot (N, pvaluenh[,1:5], pch=18)
par (mfrow=c(1,1))#
matplot (N, pvaluenh[,1:6], pch=18)
par (mfrow=c(1,1))#
matplot (N, pvaluenh[,1:7], pch=18)
par (mfrow=c(1,1))#
matplot (N, pvaluenh[,1:8], pch=18)
par (mfrow=c(1,1))#
matplot (N, pvaluenh[,1:9], pch=18)
w
?legend
legend (7e5, 0.4, legend=paste ("w=", w, sep=""), pch=18)
par (mfrow=c(1,1))#
matplot (N, pvaluenh[,1:9], pch=18)#
legend (7e5, 0.9, legend=paste ("w=", w, sep=""), pch=18, col=1:length(w))
matplot (N, pvaluenh[,1:9], pch=18, col=1:length(w))#
legend (7e5, 0.9, legend=paste ("w=", w, sep=""), pch=18, col=1:length(w))
matplot (N, pvaluenh[,1:9], pch=c(rep(18, length(w)-1), 16), col=1:length(w))#
legend (7e5, 0.9, legend=paste ("w=", w, sep=""), pch=c(rep(18, length(w)-1), 16), col=1:length(w))
plot (1:20, 1:20, pch=1:20)
matplot (N, pvaluenh[,1:9], pch=c(rep(18, length(w)-1), 1), col=1:length(w))#
legend (7e5, 0.9, legend=paste ("w=", w, sep=""), pch=c(rep(18, length(w)-1), 1), col=1:length(w))
plot (1:20, 1:20, pch=1:20)
matplot (N, pvaluenh[,1:9], pch=c(rep(18, length(w)-1), 'x'), col=1:length(w))#
legend (7e5, 0.9, legend=paste ("w=", w, sep=""), pch=c(rep(18, length(w)-1), 'x'), col=1:length(w))
plot (1:20, 1:20, pch='x')
plot (1:20, 1:20, pch=c(1:19,'x'))
?par
matplot (N, pvaluenh[,1:9], pch=c(rep(18, length(w)-1), 46), col=1:length(w))#
legend (7e5, 0.9, legend=paste ("w=", w, sep=""), pch=c(rep(18, length(w)-1), 46), col=1:length(w))
matplot (N, pvaluenh[,1:9], pch=c(rep(18, length(w)-1), 46), col=1:length(w), ylab="p value", main="noncentral hypergeometric distribution with odds ratio w")#
legend (7e5, 0.9, legend=paste ("w=", w, sep=""), pch=c(rep(18, length(w)-1), 46), col=1:length(w))
par (mfrow=c(1,1))#
plot (N, pvalue, pch=18)#
points (N1, pvalue1, pch=16, col="red")#
points (N2, pvalue2, pch=16, col="blue")#
points (N3, pvalue3, pch=16, col="green")
par (mfrow=c(1,1))#
plot (N, pvalue, pch=18)#
points (N1, pvalue1, pch=16, col="red", ylab="p value", main="hypergeometric distribution")#
points (N2, pvalue2, pch=16, col="blue")#
points (N3, pvalue3, pch=16, col="green")
matplot (N, pvaluenh[,1:9], pch=c(rep(18, length(w)-1), 46), col=1:length(w), ylab="p value", main="noncentral hypergeometric distribution with odds ratio w")#
legend (7e5, 0.9, legend=paste ("w=", w, sep=""), pch=c(rep(18, length(w)-1), 46), col=1:length(w))
par (mfrow=c(1,1))#
plot (N, pvalue, pch=18)#
points (N1, pvalue1, pch=16, col="red", ylab="p value", main="hypergeometric distribution")#
points (N2, pvalue2, pch=16, col="blue")#
points (N3, pvalue3, pch=16, col="green")
matplot (N, pvaluenh[,1:9], pch=c(rep(18, length(w)-1), 46), col=1:length(w), ylab="p value", main="noncentral hypergeometric distribution with odds ratio w")#
legend (7e5, 0.9, legend=paste ("w=", w, sep=""), pch=c(rep(18, length(w)-1), 46), col=1:length(w))
?memory.size
memory.size
memory.size()
memory.size(max=TRUE)
loc = c(0, 13, 15, 25, 36, 52, 68, 70, 74, 78, 83, 85, 87, 98, 103, 111, 115, 128, 130, 136, 138, 140)
length (loc)
dist = diff (loc)
length (dist)
dist
807028
807028/3600
807028/3600/24
?randIndex
library (flexclust)
?randIndex
randIndex()
randIndex
showMethods ("randIndex")
g1=rep (1, 100)
g2 = rep (3, 100)
tab = table (g1, g2)
tab
randIndex (tab)
g1 = c(g1, rep(2,100))
g2 = c(g2, rep(2,100))
tab = table (g1, g2)
tab
randIndex (tab)
g1=c(1,1,2,2)
g2=c(2,2,3,3)
tab = table (g1, g2)
randIndex (tab)
tab
run = rep (0, 1000)
run[2:10]=1
run[30:100]=1
run[150:780]=1
run.label = which (run=="1")
length (run.label)
run.diff = diff (run)
length (run.diff)
run.diff[1:50]
which (run.diff==1)
which (run.diff==-1)
start = which (run.diff==1)+1
end = which (run.diff==(-1))+1
start
end
run[start]
end[start]
run[end]
end = which (run.diff==(-1))
run[end]
run[end+1]
tmp = run[1:10]
tmp
tmp==1
tmp.2 = (tmp==1)
sum (tmp.2)
diff (tmp.2)
findRunCoord = function (run, target)#
{#
	# convert run into binary string#
	run.binary = (run==target)#
	# compute run[i]-run[i-1]#
	run.binary.diff = diff (run.binary)#
	# in the difference string, 1 indicates start and 0 indicates end#
	start = which (run.binary.diff==1) + 1#
	end = which (run.binary.diff==(-1))#
#
	return (list (start=start, end=end))#
#
}
findRunCoord (run, 1)
length (run)
run[950:1000]=1
findRunCoord (run, 1)
findRunCoord = function (x, target)#
{#
	# convert run into binary string#
	x.binary = (x==target)#
	# compute x[i]-x[i-1]#
	x.binary.diff = diff (x.binary)#
	# in the difference string, 1 indicates start and 0 indicates end#
	start = which (x.binary.diff==1) + 1#
	end = which (x.binary.diff==(-1))#
#
	return (list (start=start, end=end))#
#
}
findRunCoord (run, 1)
run[1:10]=2
run[1:20]
findRunCoord (run, 1)
?svd
svd
mahalanobis
solve
?solve
?pchisq
m1 = 400
m2 = 150
a = 50
mcnemar = (abs (m1-m2)-0.5)^2 / (m1+m2-2*a)
mcnemar.p = pchisq (mcnemar, df=1, lower.tail=FALSE)
mcnemar.p
a / sqrt(m1*m2)
a = 0:150
mcnemar = (abs (m1-m2)-0.5)^2 / (m1+m2-2*a)
mcnemar.p = pchisq (mcnemar, df=1, lower.tail=FALSE)
plot (a, mcnemar.p)
m1
r.asym = a / sqrt(m1*m2)
rc.asym = 2*a/(m1+m2)
matplot (a, cbind (r.asym, rc.asym))
m2=400
a = 0:400
r.asym = a / sqrt(m1*m2)
rc.asym = 2*a/(m1+m2)
matplot (a, cbind (r.asym, rc.asym))
m2 = 40
a=0:40
r.asym = a / sqrt(m1*m2)
rc.asym = 2*a/(m1+m2)
matplot (a, cbind (r.asym, rc.asym))
?rhyper
rho = 0.1
pi = 0.97
pi *(1-exp(-6*rho))
pi *(1-exp(-6.7*rho))
0.97*0.01^3
0.03*0.5^3
8^22
1-exp(-0.1*6.67)
rho = 0.001
tau = 0.1
tmp = matrix (c(1-tau, tau, rho*(1-tau), 1-rho*(1-tau)), nrow=2,byrow=TRUE)
tmp
tmp %*% tmp
tmp %*% tmp %*% tmp
tmp %*% tmp %*% tmp %*% tmp
650*(1+0.036)/1.5715
3650*(1+0.006)/10.5414
3650/650
3650*(1+0.006)
3650*(1+0.007)/10.5414
673.4/1.57
loc = c(0, 4, 25, 27, 34, 39, 48, 54, 60, 62, 98, 103, 114, 121, 127, 130, 133, 160, 162, 171, 188, 194, 214, 219, 222, 234, 240, 250, 263, 267, 278, 281, 289, 297, 319, 327, 339, 355, 361, 368, 370, 402, 421, 434, 451, 465, 491, 501, 516, 534, 541, 550, 554, 581#
)
length (loc)
runif (1)
loc = c(0, 2, 18, 27, 32, 53, 58, 63, 71, 85, 95, 100, 112, 123, 133, 137,#
140, 145, 148, 151, 155, 157, 161, 164, 167, 173, 179, 182)
length (loc)
runif (1)
100645/3600
96832/3600
120709/3600
4.2e5*0.2
650+250+200+200+600
2.48/7512
7000*0.02
2.12/3109
7.89/3774
computeStirlingFirst = function (n)#
{#
	s = matrix (0, ncol=n+1, nrow=n)#
	s[1,2] = 1#
	for	(i in 2:n)#
		for (j in 2:(i+1))#
			s[i,j] = s[i-1,j-1] - (i-1) * s[i-1, j]#
	return (s[,-1])#
}
tmp = computeStirlingFirst (5)
tmp
computePolynomial = function (x, n)#
{#
	f = x#
	if (n>1)#
	{#
		for (i in 2:n)#
			f = f * (x+i-1)#
	}#
	return (f)#
}#
#
computeProbKGivenAlphaN = function (k, alpha, n)#
{#
	result = log (abs (computeStirlingFirst(n)[n,k])) + k*log(alpha) - log (computePolynomial (alpha, n))#
	return (result)#
}#
#
computeProbKGivenN = function (k, n, alpha)#
{#
	logcoef = log (abs (computeStirlingFirst(n)[n,k]))#
	logtermalpha = k*log(alpha) - log (computePolynomial(alpha,n))#
	avgtermalpha = mean (exp (logtermalpha))#
	#
	result = exp (logcoef) * avgtermalpha#
	return (result)#
}#
#
# alpha: vector#
computeDistK = function (n, alpha)#
{#
	tmp = rep (0, n)#
	for (k in 1:n)#
	{#
		print (k)#
		tmp[k] = computeProbKGivenN (k, n, alpha)#
	}#
	return (tmp)#
}
k.alpha1 = computeDistK (10, 1)
k.alpha1
sum (k.alpha1)
plot (1:10, k.alpha1)
mean (k.alpha1)
log (11)
k.alpha1 = computeDistK (20, 1)
k.alpha1
sum (k.alpha1)
plot (1:10, k.alpha1)
plot (1:20, k.alpha1)
log (21)
k.alpha2 = computeDistK (20, 2)
k.alpha2
plot (1:20, k.alpha2)
2*log(22/2)
k.alpha1 = computeDistK (50, 1)
k.alpha1
plot (1:50, k.alpha1)
log(51)
k.alpha1 = computeDistK (100, 1)
plot (1:100, k.alpha1)
k.alpha1[1:10]
log(101)
plot (1:100, k.alpha2)
k.alpha2 = computeDistK (100, 2)
plot (1:100, k.alpha2)
k.alpha2[1:10]
2*log(102/2)
k.alpha05 = computeDistK (100, 0.5)
plot (1:100, k.alpha05)
k.alpha05[1:10]
0.5 * log(100.5/0.5)
exp(7)
exp(3)
exp(6)
dataDir = "../Data/"#
file.in = paste (dataDir, "FMR1through22SEPrev.txt", sep="")#
#
fmr1 = read.table (file.in, header = FALSE, sep=",")#
dim (fmr1)#
fmr1.data = as.matrix (fmr1[,-1])#
n.site = ncol (fmr1.data)#
n.proc = 3#
n.start = n.proc*2
mcmcDir = "../Data/HMM/"#
file.pars.mcmc = paste (mcmcDir, "FMR1Human22_hmm_v6_1_pars_mcmc.out", sep="")#
par.mcmc1 = as.matrix(read.table (file.pars.mcmc, header = FALSE))#
file.pars.mcmc = paste (mcmcDir, "FMR1Human22_hmm_v6_1b_pars_mcmc.out", sep="")#
par.mcmc2 = as.matrix(read.table (file.pars.mcmc, header = FALSE))#
file.pars.mcmc = paste (mcmcDir, "FMR1Human22_hmm_v6_1c_pars_mcmc.out", sep="")#
par.mcmc3 = as.matrix(read.table (file.pars.mcmc, header = FALSE))#
#
par.mcmc = as.matrix (rbind (par.mcmc1, par.mcmc2, par.mcmc3))#
mcmc.length = nrow (par.mcmc)#
#
tau.mcmc = par.mcmc[,1:3]#
rho.mcmc = par.mcmc[,4:6]#
m.mcmc = par.mcmc[,(n.start+1):(n.start+n.site)]#
rm.mcmc = par.mcmc[,n.start+n.site+1]#
gm.mcmc = par.mcmc[,n.start+n.site+2]#
c.mcmc = par.mcmc[,n.start+n.site+3]#
md.mcmc = par.mcmc[,n.start+n.site+4]#
mm.mcmc = par.mcmc[,n.start+n.site+5]
tau.m = tau.mcmc[,1]
length (tau.m)
hist (tau.m, breaks=20, freq=FALSE)
hist (tau.m, breaks=30, freq=FALSE)
par (mfrow=c(2,2))
hist (tau.m, breaks=30, freq=FALSE)
?sample
tau.rp = tau.mcmc[,2]
tau.rd = tau.mcmc[,3]
hist (tau.rp - tau.rd, breaks=30, freq=FALSE)
niter = 1e3#
rsize = 100
rp.rs = matrix (0, nrow=niter, ncol=rsize)#
rd.rs = rp.rs#
for (i in 1:niter) {#
	rp.rs[i,] = samples (tau.rp, size=rsize, replace=TRUE)#
	rd.rs[i,] = samples (tau.rd, size=rsize, replace=TRUE)#
}
for (i in 1:niter) {#
	rp.rs[i,] = sample (tau.rp, size=rsize, replace=TRUE)#
	rd.rs[i,] = sample (tau.rd, size=rsize, replace=TRUE)#
}
med.diff = apply (rp.rs, 1, med) - apply (rd.rs, 1, med)
med.diff = apply (rp.rs, 1, median) - apply (rd.rs, 1, median)
hist (med.diff, breaks=30, freq=FALSE)
mean.diff = apply (rp.rs, 1, mean) - apply (rd.rs, 1, mean)#
hist (mean.diff, breaks=30, freq=FALSE)
source ("bbt2.R")
###############################################################
# bbt2#
##
# Bayesian bootstrap testing procedure for two parameters.#
##
# Input: x: posterior samples of parameter x; vector#
#		 y: posterior samples of parameter y; vector#
#		 niter: number of bootstrap samples to take; integer#
#		 nsize.x: size of each bootstrap sample for x; integer#
#		 nsize.y: size of each bootstrap sample for y; integer#
#		 stat: "mean" or "median"; which do you want to test?#
#		 PLOT: TRUE or FALSE#
# Output: edf: empirical distribution of the test statistic; vector#
#		  stat: "mean" or "median"#
#		  p: Pr(stat(x)>stat(y)); similar to a p value#
###############################################################
bbt2 = function (x, y, niter=1e3, rsize.x=100, rsize.y=100, stat=c("mean", "median"), PLOT=FALSE) {#
	# Initialization#
	stat = match.arg (stat)#
	x.rs = matrix (0, nrow=niter, ncol=rsize.x)#
	y.rs = matrix (0, nrow=niter, ncol=rsize.y)#
	#
	# Generate bootstrap samples for x and y#
	for (i in 1:niter) {#
		x.rs[i,] = sample (x, size=rsize.x, replace=TRUE)#
		y.rs[i,] = sample (y, size=rsize.y, replace=TRUE)#
	}#
	#
	# Empirical distribution of mean and median difference#
	if (stat=="mean") {#
		q = mean (x) - mean (y)#
		edf = apply (x.rs, 1, mean) - apply (y.rs, 1, mean)#
	}#
	else {#
		q = median (x) - median (y)#
		edf = apply (x.rs, 1, median) - apply (y.rs, 1, median)#
	}#
	#
	if (PLOT) {#
		hist (edf, breaks=30, freq=FALSE, xlab="", main=paste ("Bootstrap distribution of (x.", stat,"-y.", stat, ")", sep=""))#
		abline (v=q, col="red")#
	}#
	#
	return (list (stat=stat, edf=edf, p=which (edf>=q) / niter))#
}
med.bbt = bbt2 (x=tau.rp, y=tua.rd, stat="median", PLOT=TRUE)
med.bbt = bbt2 (x=tau.rp, y=tau.rd, stat="median", PLOT=TRUE)
summary (med.bbt)
med.bbt$stat
med.bbt$p
###############################################################
# bbt2#
##
# Bayesian bootstrap testing procedure for two parameters.#
##
# Input: x: posterior samples of parameter x; vector#
#		 y: posterior samples of parameter y; vector#
#		 niter: number of bootstrap samples to take; integer#
#		 nsize.x: size of each bootstrap sample for x; integer#
#		 nsize.y: size of each bootstrap sample for y; integer#
#		 stat: "mean" or "median"; which do you want to test?#
#		 PLOT: TRUE or FALSE#
# Output: edf: empirical distribution of the test statistic; vector#
#		  stat: "mean" or "median"#
#		  p: Pr(stat(x)>stat(y)); similar to a p value#
###############################################################
bbt2 = function (x, y, niter=1e3, rsize.x=100, rsize.y=100, stat=c("mean", "median"), PLOT=FALSE) {#
	# Initialization#
	stat = match.arg (stat)#
	x.rs = matrix (0, nrow=niter, ncol=rsize.x)#
	y.rs = matrix (0, nrow=niter, ncol=rsize.y)#
	#
	# Generate bootstrap samples for x and y#
	for (i in 1:niter) {#
		x.rs[i,] = sample (x, size=rsize.x, replace=TRUE)#
		y.rs[i,] = sample (y, size=rsize.y, replace=TRUE)#
	}#
	#
	# Empirical distribution of mean and median difference#
	if (stat=="mean") {#
		q = mean (x) - mean (y)#
		edf = apply (x.rs, 1, mean) - apply (y.rs, 1, mean)#
	}#
	else {#
		q = median (x) - median (y)#
		edf = apply (x.rs, 1, median) - apply (y.rs, 1, median)#
	}#
	#
	if (PLOT) {#
		hist (edf, breaks=30, freq=FALSE, xlab="", main=paste ("Bootstrap distribution of (x.", stat,"-y.", stat, ")", sep=""))#
		abline (v=q, col="red")#
	}#
	#
	return (list (stat=stat, edf=edf, p=sum (edf>=q) / niter))#
}
med.bbt = bbt2 (x=tau.rp, y=tau.rd, stat="median", PLOT=TRUE)
med.bbt$p
